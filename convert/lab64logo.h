// Don't edit this file!  It's software-generated.
// See convert.py script instead.

#define PALETTE1  0
#define PALETTE4  1
#define PALETTE8  2
#define TRUECOLOR 3

#define NUM_LEDS 32

// lab64.gif ---------------------------------------------------------------

const uint8_t PROGMEM palette00[][3] = {
  {  13,   1,   0 },
  {  13,   1,   0 },
  {  13,   2,   0 },
  {  13,   2,   0 },
  {  13,   2,   0 },
  {  13,   2,   0 },
  {  13,   2,   0 },
  {  13,   2,   0 },
  {  13,   2,   0 },
  {  13,   3,   0 },
  {  13,   3,   1 },
  {  13,   3,   1 },
  {  13,   3,   1 },
  {  13,   4,   2 },
  {  13,   4,   2 },
  {  14,   4,   2 },
  {  14,   4,   2 },
  {  14,   5,   2 },
  {  14,   5,   3 },
  {  14,   5,   3 },
  {  14,   5,   3 },
  {  14,   6,   4 },
  {  14,   6,   4 },
  {  14,   6,   4 },
  {  14,   7,   5 },
  {  14,   7,   5 },
  {  14,   7,   5 },
  {  14,   7,   6 },
  {  14,   8,   6 },
  {  14,   8,   7 },
  {  15,   9,   7 },
  {  15,   9,   8 },
  {  15,   9,   8 },
  {  15,  10,   8 },
  {  15,  10,   9 },
  {  15,  10,   9 },
  {  15,  11,  10 },
  {  15,  11,  10 },
  {  15,  12,  11 },
  {  15,  12,  11 },
  {  15,  13,  12 },
  {  15,  13,  13 },
  {  15,  14,  13 },
  {  16,  14,  14 },
  {  16,  15,  15 },
  {  16,  16,  16 } };

const uint8_t PROGMEM pixels00[] = {  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X26, 0X14, 0X15,  0X15, 0X15, 0X15, 0X15, 0X15, 0X15, 0X15, 0X15,  0X15, 0X15, 0X15, 0X15, 0X15, 0X15, 0X16, 0X14,  0X19, 0X2B, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X15, 0X1B, 0X28,  0X24, 0X26, 0X26, 0X26, 0X26, 0X26, 0X26, 0X26,  0X26, 0X26, 0X26, 0X26, 0X26, 0X26, 0X24, 0X28,  0X10, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2C, 0X17, 0X28, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X1C, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X17, 0X24, 0X2D,  0X2D, 0X2D, 0X28, 0X26, 0X27, 0X26, 0X27, 0X2C,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2C, 0X2D,  0X19, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2C, 0X17, 0X26, 0X2D,  0X2D, 0X2B, 0X11, 0X09, 0X0D, 0X0D, 0X06, 0X1C,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X1A, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X17, 0X26, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2C, 0X2D, 0X20, 0X1E,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X19, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2C, 0X17, 0X26, 0X2D,  0X2D, 0X2D, 0X2D, 0X2B, 0X28, 0X24, 0X10, 0X23,  0X2D, 0X2D, 0X2D, 0X2D, 0X2B, 0X20, 0X24, 0X2D,  0X1A, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2C, 0X17, 0X24, 0X2D,  0X2D, 0X2D, 0X2D, 0X23, 0X15, 0X1E, 0X15, 0X1C,  0X2D, 0X2D, 0X2D, 0X24, 0X14, 0X0B, 0X0E, 0X2D,  0X1C, 0X1F, 0X19, 0X21, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X29, 0X1E, 0X2B, 0X2D, 0X17, 0X27, 0X2D,  0X2D, 0X2D, 0X2D, 0X29, 0X10, 0X13, 0X12, 0X20,  0X2D, 0X2D, 0X2D, 0X15, 0X1B, 0X2D, 0X12, 0X23,  0X17, 0X1C, 0X0F, 0X0C, 0X1F, 0X2D, 0X2D, 0X2D,  0X2B, 0X11, 0X15, 0X16, 0X2C, 0X26, 0X24, 0X2B,  0X2D, 0X2D, 0X2D, 0X2D, 0X26, 0X1E, 0X1C, 0X26,  0X2D, 0X26, 0X22, 0X14, 0X24, 0X2D, 0X27, 0X10,  0X1A, 0X1E, 0X1A, 0X2D, 0X08, 0X24, 0X2D, 0X2D,  0X29, 0X12, 0X20, 0X12, 0X2D, 0X2A, 0X07, 0X12,  0X2D, 0X2D, 0X1B, 0X19, 0X1E, 0X1E, 0X1C, 0X28,  0X2D, 0X14, 0X0D, 0X20, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X1E, 0X20, 0X2B, 0X11, 0X2B, 0X2D, 0X2D,  0X2D, 0X26, 0X0F, 0X13, 0X2D, 0X26, 0X04, 0X15,  0X2D, 0X2D, 0X1C, 0X12, 0X0C, 0X1A, 0X0B, 0X20,  0X21, 0X14, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X29, 0X05, 0X26, 0X28, 0X0E, 0X2A, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X17, 0X23, 0X2D, 0X0F, 0X29,  0X2D, 0X2D, 0X2D, 0X27, 0X17, 0X2D, 0X20, 0X1C,  0X28, 0X14, 0X26, 0X2D, 0X2D, 0X24, 0X2B, 0X26,  0X14, 0X19, 0X17, 0X2D, 0X1F, 0X0B, 0X1C, 0X2D,  0X2D, 0X2D, 0X2D, 0X24, 0X16, 0X26, 0X17, 0X2D,  0X2D, 0X2D, 0X2D, 0X28, 0X13, 0X12, 0X0D, 0X1F,  0X2D, 0X17, 0X1A, 0X2D, 0X20, 0X12, 0X1A, 0X10,  0X1C, 0X2D, 0X0B, 0X27, 0X2D, 0X23, 0X14, 0X2D,  0X2D, 0X2D, 0X2D, 0X2B, 0X18, 0X17, 0X1A, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X26, 0X17, 0X24, 0X2D,  0X24, 0X12, 0X28, 0X2D, 0X12, 0X19, 0X12, 0X1C,  0X17, 0X15, 0X18, 0X2D, 0X2D, 0X17, 0X19, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X1C, 0X17, 0X1A, 0X2B,  0X2D, 0X2D, 0X2B, 0X1A, 0X14, 0X15, 0X19, 0X2D,  0X1A, 0X10, 0X2D, 0X2D, 0X2A, 0X12, 0X14, 0X2D,  0X29, 0X20, 0X2C, 0X2D, 0X17, 0X13, 0X26, 0X2D,  0X2D, 0X2D, 0X2D, 0X2C, 0X19, 0X24, 0X1F, 0X1A,  0X2D, 0X2D, 0X1C, 0X14, 0X14, 0X21, 0X18, 0X1A,  0X2C, 0X17, 0X12, 0X28, 0X2D, 0X22, 0X15, 0X2D,  0X2D, 0X2D, 0X2D, 0X2C, 0X0C, 0X2B, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X17, 0X28, 0X26, 0X02,  0X21, 0X2A, 0X19, 0X26, 0X1E, 0X1A, 0X1A, 0X1B,  0X2D, 0X2D, 0X15, 0X17, 0X2D, 0X2D, 0X14, 0X29,  0X2D, 0X2D, 0X2D, 0X28, 0X0A, 0X2A, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2A, 0X12, 0X2B, 0X27, 0X01,  0X12, 0X2B, 0X29, 0X2A, 0X2A, 0X14, 0X17, 0X2C,  0X2D, 0X2D, 0X28, 0X0B, 0X24, 0X29, 0X0C, 0X26,  0X2D, 0X1E, 0X19, 0X0F, 0X20, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2B, 0X15, 0X0D, 0X28, 0X2D, 0X20,  0X27, 0X2D, 0X2D, 0X2D, 0X2B, 0X14, 0X23, 0X2D,  0X2D, 0X2D, 0X2D, 0X24, 0X12, 0X17, 0X03, 0X20,  0X21, 0X15, 0X1C, 0X23, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X1D, 0X14, 0X1F, 0X15, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X26, 0X1E, 0X14, 0X21, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2A, 0X2B, 0X24, 0X29,  0X18, 0X21, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X26, 0X11, 0X15, 0X24, 0X2D, 0X2D,  0X2D, 0X2D, 0X1C, 0X00, 0X12, 0X14, 0X0C, 0X24,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X1A, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X28, 0X25, 0X23, 0X28, 0X2D,  0X2D, 0X2D, 0X21, 0X1A, 0X20, 0X13, 0X0D, 0X24,  0X2D, 0X2D, 0X2D, 0X2D, 0X2C, 0X2C, 0X2B, 0X2D,  0X19, 0X20, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X16, 0X28, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X1C, 0X1F, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X15, 0X19, 0X26,  0X22, 0X24, 0X24, 0X24, 0X24, 0X24, 0X24, 0X24,  0X23, 0X23, 0X23, 0X23, 0X23, 0X24, 0X22, 0X26,  0X0D, 0X21, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X26, 0X17, 0X19,  0X19, 0X19, 0X19, 0X18, 0X18, 0X18, 0X18, 0X19,  0X19, 0X19, 0X19, 0X19, 0X19, 0X19, 0X19, 0X18,  0X1B, 0X2B, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D,  0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D, 0X2D };

typedef struct {
  uint8_t        type;    // PALETTE[1,4,8] or TRUECOLOR
  line_t         lines;   // Length of image (in scanlines
  const uint8_t *palette; // -> PROGMEM color table (NULL if truecolor
  const uint8_t *pixels;  // -> Pixel data in PROGMEM
} image;

const image PROGMEM images[] = {
  { PALETTE8 ,   32, (const uint8_t *)palette00, pixels00 }};

#define NUM_IMAGES (sizeof(images) / sizeof(images[0]))
